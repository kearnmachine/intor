package at.intoor.db.generated;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import at.intoor.db.generated.DeviceEntity;
import at.intoor.db.generated.MapImageEntity;
import at.intoor.db.generated.DistanceEntity;
import at.intoor.db.generated.MeasurementEntity;

import at.intoor.db.generated.DeviceEntityDao;
import at.intoor.db.generated.MapImageEntityDao;
import at.intoor.db.generated.DistanceEntityDao;
import at.intoor.db.generated.MeasurementEntityDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig deviceEntityDaoConfig;
    private final DaoConfig mapImageEntityDaoConfig;
    private final DaoConfig distanceEntityDaoConfig;
    private final DaoConfig measurementEntityDaoConfig;

    private final DeviceEntityDao deviceEntityDao;
    private final MapImageEntityDao mapImageEntityDao;
    private final DistanceEntityDao distanceEntityDao;
    private final MeasurementEntityDao measurementEntityDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        deviceEntityDaoConfig = daoConfigMap.get(DeviceEntityDao.class).clone();
        deviceEntityDaoConfig.initIdentityScope(type);

        mapImageEntityDaoConfig = daoConfigMap.get(MapImageEntityDao.class).clone();
        mapImageEntityDaoConfig.initIdentityScope(type);

        distanceEntityDaoConfig = daoConfigMap.get(DistanceEntityDao.class).clone();
        distanceEntityDaoConfig.initIdentityScope(type);

        measurementEntityDaoConfig = daoConfigMap.get(MeasurementEntityDao.class).clone();
        measurementEntityDaoConfig.initIdentityScope(type);

        deviceEntityDao = new DeviceEntityDao(deviceEntityDaoConfig, this);
        mapImageEntityDao = new MapImageEntityDao(mapImageEntityDaoConfig, this);
        distanceEntityDao = new DistanceEntityDao(distanceEntityDaoConfig, this);
        measurementEntityDao = new MeasurementEntityDao(measurementEntityDaoConfig, this);

        registerDao(DeviceEntity.class, deviceEntityDao);
        registerDao(MapImageEntity.class, mapImageEntityDao);
        registerDao(DistanceEntity.class, distanceEntityDao);
        registerDao(MeasurementEntity.class, measurementEntityDao);
    }
    
    public void clear() {
        deviceEntityDaoConfig.getIdentityScope().clear();
        mapImageEntityDaoConfig.getIdentityScope().clear();
        distanceEntityDaoConfig.getIdentityScope().clear();
        measurementEntityDaoConfig.getIdentityScope().clear();
    }

    public DeviceEntityDao getDeviceEntityDao() {
        return deviceEntityDao;
    }

    public MapImageEntityDao getMapImageEntityDao() {
        return mapImageEntityDao;
    }

    public DistanceEntityDao getDistanceEntityDao() {
        return distanceEntityDao;
    }

    public MeasurementEntityDao getMeasurementEntityDao() {
        return measurementEntityDao;
    }

}
