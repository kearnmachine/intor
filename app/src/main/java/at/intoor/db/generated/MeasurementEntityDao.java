package at.intoor.db.generated;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import at.intoor.db.generated.MeasurementEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MEASUREMENT_ENTITY.
*/
public class MeasurementEntityDao extends AbstractDao<MeasurementEntity, Long> {

    public static final String TABLENAME = "MEASUREMENT_ENTITY";

    /**
     * Properties of entity MeasurementEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Timestamp = new Property(1, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property Device = new Property(2, Long.class, "device", false, "DEVICE");
        public final static Property Rssi = new Property(3, Integer.class, "rssi", false, "RSSI");
    };

    private Query<MeasurementEntity> deviceEntity_MeasurementsQuery;

    public MeasurementEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MeasurementEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MEASUREMENT_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TIMESTAMP' INTEGER," + // 1: timestamp
                "'DEVICE' INTEGER," + // 2: device
                "'RSSI' INTEGER);"); // 3: rssi
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MEASUREMENT_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MeasurementEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(2, timestamp);
        }
 
        Long device = entity.getDevice();
        if (device != null) {
            stmt.bindLong(3, device);
        }
 
        Integer rssi = entity.getRssi();
        if (rssi != null) {
            stmt.bindLong(4, rssi);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MeasurementEntity readEntity(Cursor cursor, int offset) {
        MeasurementEntity entity = new MeasurementEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // timestamp
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // device
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // rssi
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MeasurementEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTimestamp(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setDevice(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setRssi(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MeasurementEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MeasurementEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "measurements" to-many relationship of DeviceEntity. */
    public List<MeasurementEntity> _queryDeviceEntity_Measurements(Long device) {
        synchronized (this) {
            if (deviceEntity_MeasurementsQuery == null) {
                QueryBuilder<MeasurementEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Device.eq(null));
                queryBuilder.orderRaw("TIMESTAMP DESC");
                deviceEntity_MeasurementsQuery = queryBuilder.build();
            }
        }
        Query<MeasurementEntity> query = deviceEntity_MeasurementsQuery.forCurrentThread();
        query.setParameter(0, device);
        return query.list();
    }

}
